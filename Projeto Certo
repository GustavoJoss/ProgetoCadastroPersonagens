//Banco de dados de personagens de desenhos animados
#include <iostream>
#include <fstream>
#include <string>
#include <stdio.h>
#include <iomanip>
#include <cctype>
#include <cstring>
#include <string.h>

using namespace std;



// NA ESTRUTURA STRUCT ESTAO OS CAMPOS QUE UTILIZAREMOS NESTRE PROJETO.

struct character{
    int identificador;
    char name[30];
    char creator[80];
    char tituloDesenho[30];
    float height;
    char bio[500];
};


// FUNÇAO PARA TRANSFORMAR TODAS AS LETRAS DE UMA STRING EM LETRAS MINUSCULAS:

char* minusculo(const char* palavra) {
    size_t length = std::strlen(palavra); // Obter o comprimento da string de entrada
    char* result = new char[length + 1]; // Criar um novo vetor para o resultado (mais 1 para o caractere nulo '\0')
    
    for (size_t i = 0; i < length; i++) {
        result[i] = std::tolower(palavra[i]); // Transformar a letra em minúscula e armazená-la no vetor de resultado
    }
    
    result[length] = '\0'; // Adicionar o caractere nulo para finalizar a string
    
    return result;
}

int particionaNome (character personagens[], int p, int r) { // v[p..r]
    char pivo[30];
    strcpy(pivo, personagens[r].name);
    int j = p;
    int k;
    for (k = p; k < r; k++) {
        if (strcmp(personagens[k].name, pivo) <= 0) {
            swap(personagens[j].name,personagens[k].name);
            swap(personagens[j].tituloDesenho,personagens[k].tituloDesenho);
            swap(personagens[j].creator,personagens[k].creator);
            swap(personagens[j].height,personagens[k].height);
            swap(personagens[j].bio,personagens[k].bio);
            j++; 
        } 
    }
    swap(personagens[j].name,personagens[r].name);
    swap(personagens[j].tituloDesenho,personagens[r].tituloDesenho);
    swap(personagens[j].creator,personagens[r].creator);
    swap(personagens[j].height,personagens[r].height);
    swap(personagens[j].bio,personagens[r].bio);
    return j; 
}

void quickSortNome(character personagens[], int pos_pivo, int fim) {
    int pos_novo_pivo;         
    if (pos_pivo < fim) {  
        pos_novo_pivo = particionaNome(personagens, pos_pivo, fim);
        quickSortNome(personagens, pos_pivo, pos_novo_pivo - 1); 
        quickSortNome(personagens, pos_novo_pivo + 1, fim);
    }
}

int particionaAltura (character personagens[], int p, int r) { // v[p..r]
    float pivo;
    pivo = personagens[r].height;
    int j = p;
    int k;
    for (k = p; k < r; k++) {
        if (personagens[k].height <= pivo) {
            swap(personagens[j].name,personagens[k].name);
            swap(personagens[j].tituloDesenho,personagens[k].tituloDesenho);
            swap(personagens[j].creator,personagens[k].creator);
            swap(personagens[j].height,personagens[k].height);
            swap(personagens[j].bio,personagens[k].bio);
            j++; 
        } 
    }
    swap(personagens[j].name,personagens[r].name);
    swap(personagens[j].tituloDesenho,personagens[r].tituloDesenho);
    swap(personagens[j].creator,personagens[r].creator);
    swap(personagens[j].height,personagens[r].height);
    swap(personagens[j].bio,personagens[r].bio);
    return j; 
}


void quickSortAltura(character personagens[], int pos_pivo, int fim) {
    int pos_novo_pivo;         
    if (pos_pivo < fim) {  
        pos_novo_pivo = particionaAltura(personagens, pos_pivo, fim);
        quickSortAltura(personagens, pos_pivo, pos_novo_pivo - 1); 
        quickSortAltura(personagens, pos_novo_pivo + 1, fim);
    }
}


//PROCEDIMENTO PARA IMPRIMIR TODOS OS PERSONAGENS DO NOSSO ARQUIVO CSV:

void imprimirLista(character personagens[], int tamanho) {
    cout << "\n\n\n" << endl;
    int select = 0;
    cout<< "[1] - Imprimir lista em ordem alfabetica \n"<<
            "[2] - Imprimir lista em ordem de altura \n" << endl;

    cin >> select;

    switch (select) {
        case 1:
            fflush (stdin);

            quickSortNome(personagens, 0, tamanho-1);

            for (int i = 0; i < tamanho; i++){
                cout << "PERSONAGEM " << personagens[i].identificador << ": \n" << "Nome: " <<  personagens[i].name << "\n"  <<
                "Titulo do Desenho: " <<  personagens[i].tituloDesenho << "\n" << "Altura: "<< personagens[i].height << " metros " << 
                "\n" << "Criador: " << personagens[i].creator << "\n" << "Descricao: " << personagens[i].bio << "\n" << endl;
                cout << endl;
                cout << "======================================================================================================================="<< "\n" << endl;
            }

            break;

        case 2:
            fflush (stdin);

            quickSortAltura(personagens, 0, tamanho-1);
            
            for (int i = 0; i < tamanho; i++){
                cout << "PERSONAGEM " << personagens[i].identificador << ": \n" << "Nome: " <<  personagens[i].name << "\n"  <<
                "Titulo do Desenho: " <<  personagens[i].tituloDesenho << "\n" << "Altura: "<< personagens[i].height << " metros " << 
                "\n" << "Criador: " << personagens[i].creator << "\n" << "Descricao: " << personagens[i].bio << "\n" << endl;
                cout << endl;
                cout << "======================================================================================================================="<< "\n" << endl;
            }
            
            break;
        
        default:
            break;
        }

    
}


//PROCEDIMENTO PARA PESQUISAR ATRAVÉS DOS CAMPOS STRING, NOME, TITULO E CRADOR DE CADA PERSONAGEM.

void searchName(character personagens[], int tamanho){
    char nomeBusca[50];
    int encontrados[tamanho];
    int j = 0;
    char *ponteiro;

    quickSortNome(personagens, 0, tamanho-1);
    
    fflush(stdin);
    cout << "\n\n\nDigite o nome do personagem que deseja encontrar: ";
    cin.getline(nomeBusca, 50);
    
    
    // ESSA ESTRURA FOI UTILIZADA PARA PESQUISAR UMA STRING DENTRO DE UMA STRING, POR ISSO A UTILIZAÇAO DE strstr:
    for (int i = 0; i < tamanho; i++) {
        ponteiro = strstr(minusculo(personagens[i].name), minusculo(nomeBusca));
        if (ponteiro) {
            encontrados[j] = i;
            j++;
        }           
    }

    if (j == 0) {
        cout << "Nenhum personagem foi encontrado com o nome " << nomeBusca << endl;
    }
    else {
        cout << "\nLista de personagens encontrados com o nome " << nomeBusca << ":" << endl;

        for (int i = 0; i < j; i++) {
            cout << "\n" << endl; 
            cout << "PERSONAGEM " <<personagens[encontrados[i]].identificador << ": \n" << "Nome: " <<  personagens[encontrados[i]].name << "\n" << "Altura: "<< personagens[encontrados[i]].height << " metros "   << 
            "\n" << "Titulo do Desenho: " <<  personagens[encontrados[i]].tituloDesenho << "\n" << "Criador: " << personagens[encontrados[i]].creator << "\n" << "Descricao: " << personagens[encontrados[i]].bio << "\n" << endl;
            cout << endl;
            cout << "=======================================================================================================================";               
        }
        cout << endl;            
    }     
    
    cout << "\n";               
}   


// PRCEDIMENTO PARA PESQUISAR UM PERSONAGEM QEU ESTA DENTRO DE UMA ALTURA MÍNIMA DIGITADA ATÉ UMA ALTURA MÁXIMA DIGITADA:

void searchHeight(character personagens[], int tamanho){

    float heightMin, heightMax;
    int encontrados[tamanho], j = 0;

    quickSortAltura(personagens, 0, tamanho-1);
    
    cout << endl;
    cout << "Altura minima: ";
    cin >> heightMin;
    cout << "Altura maxima: ";
    cin >> heightMax;

    for (int i = 0; i < tamanho; i++) {
            if (personagens[i].height >= heightMin and personagens[i].height <= heightMax) {
                encontrados[j] = i;
                j++;
            }            
        }

        if (j == 0) {
            cout << "Nenhum personagem foi encontrado com a altura entre " << heightMin << " e " << heightMax << endl;
        }
        else {
            cout << "\nLista de personagens encontrados com a altura entre " << heightMin << " metros e " << heightMax << " metros : " << endl;

            for (int i = 0; i < j; i++) {
                cout << "\n" << endl; 
                cout << "PERSONAGEM " <<personagens[encontrados[i]].identificador << ": \n" << "Nome: " <<  personagens[encontrados[i]].name 
                    << "\n" << "Altura: "<< personagens[encontrados[i]].height << " metros " <<"\n" << "Titulo do Desenho: " 
                    <<  personagens[encontrados[i]].tituloDesenho << "\n" << "Criador: " << personagens[encontrados[i]].creator << "\n" 
                    << "Descricao: " << personagens[encontrados[i]].bio << "\n" << endl;
                cout << endl;
                cout << "=======================================================================================================================";                
            }            
        }
    
    cout << "\n";
    cout << endl;
}


//PROCEDIMNETO PARA ADICIONAR UM NOVO PERSONAGEM:

void addChar(character personagens[], int& tamanho, string cabecalho){
    char nomeAdd[30], tituloAdd[30], criadorAdd[80], bioAdd[500];
    float alturaAdd;
    
    tamanho++;

    personagens[tamanho-1].identificador = tamanho;
    
    fflush(stdin);
    cout << "\n\nInforme o nome do personagem que deseja adicionar: ";
    cin.getline(nomeAdd, 30);
    strcpy(personagens[tamanho-1].name, nomeAdd);

    fflush(stdin);
    cout << "Informe o titulo do desenho do personagem: ";
    cin.getline(tituloAdd, 30);
    strcpy(personagens[tamanho-1].tituloDesenho, tituloAdd);

    fflush(stdin);
    cout << "Informe o criador do personagem: ";
    cin.getline(criadorAdd, 80);
    strcpy(personagens[tamanho-1].creator, criadorAdd);

    fflush(stdin);
    cout << "Informe a altura do personagem: ";
    cin >> alturaAdd;
    cin.ignore();
    personagens[tamanho-1].height = alturaAdd;

    fflush(stdin);
    cout << "Informe a descricao do personagem: ";
    cin.getline(bioAdd, 500);
    strcpy(personagens[tamanho-1].bio, bioAdd);

    cout << endl;
    cout<< "Personagem adicionado com sucesso!\n\n" << endl;
    
    cout << "\nOnde deseja salvar as alteracoes? " << endl 
        << "[1] - Arquivo.csv (sera criado um arquivo binario com o mesmo nome)\n"
        << "[2] - Arquivo Binario\n";

    int arquivo;
    cin >> arquivo;

    cout << "Qual o nome do arquivo?" << endl;
    cout <<  "\nATENCAO: Caso o nome do arquivo ja existir, o mesmo sera substituido!" << endl;
    string nomeArq;
    cin >> nomeArq;
    
    if (arquivo == 1) {
        ofstream arquivoAdd (nomeArq + ".csv");
    
        arquivoAdd << cabecalho << endl;
        for (int i = 0; i < tamanho; i++){
            arquivoAdd << personagens[i].identificador << ';' <<  personagens[i].name << ";" <<  personagens[i].tituloDesenho <<
            ';'<<  personagens[i].creator << ';' << personagens[i].height << ';' << personagens[i].bio << "\n";
        }

        ofstream arqBin (nomeArq + ".dat", ios::binary);

        arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
        arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
    }
    else {
        ofstream arqBin (nomeArq + ".dat", ios::binary);

        arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
        arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
    }
    

}


//PROCEDIMENTO PARA EDITAR OS CAMPOS DE UM PERSONAGEM:

void editChar(character personagens[], int tamanho, string cabecalho){
    int identificadorBuscado;
    int select=0;
    cout << "\n\nDigite o identificador do personagem a ser editado :" <<  endl;
    cin >> identificadorBuscado;

    cout << "PERSONAGEM " << personagens[identificadorBuscado-1].identificador << ": \n" << "Nome: " <<  personagens[identificadorBuscado-1].name << "\n" 
        << "Altura: "<< personagens[identificadorBuscado-1].height << " metros " << "\n" << "Titulo do Desenho: " 
        <<  personagens[identificadorBuscado-1].tituloDesenho << "\n" << "Criador: " << personagens[identificadorBuscado-1].creator 
        << "\n" << "Descricao: " << personagens[identificadorBuscado-1].bio << "\n" << endl;
    cout << endl;
    cout << "======================================================================================================================="<< "\n" << endl;
    

    cout << "Voce deseja alterar os dados desse identificador ? \n"<<
    "[1]- Sim " << endl << "[2]- Nao" << endl;

    cout << "\n\n";

    int numeroDigitado;
    cin >> numeroDigitado;

    cout << endl;

    if (numeroDigitado==1){

        do{
            char novoNome [30];
            float novaAltura;
            char novoTitulo[30];
            char novoCriador[30];
            char novaDescricao[30];

            switch (select)
            {
            case 0:
                cout<< "[1] - Editar nome do personagem \n"<<
                "[2] - Editar Altura \n"<<
                "[3] - Editar o Titulo \n"<< 
                "[4] - Editar o nome do criador \n"<<
                "[5] - Editar Descricao \n\n"<<
                "[-1] - Para sair da edicao\n" << endl;
                break;

            case 1:
                fflush (stdin);
                cout<< "Digite o novo nome do personagem : ";
                cin.getline(novoNome, 30);
                strcpy(personagens[identificadorBuscado-1].name, novoNome);
                cout << "\nNome do personagem alterado com sucesso!\n" << endl;
                
                break;

            case 2:
                fflush (stdin);
                cout<< "Digite a nova altura do personagem : ";
                cin  >> novaAltura;
                cin.ignore();
                personagens[identificadorBuscado-1].height= novaAltura;
                cout << "\nAltura do personagem alterada com sucesso!\n" << endl;
                
                break;

            case 3:
                fflush (stdin);
                cout<< "Digite o novo titulo do desenho : ";
                cin.getline(novoTitulo, 30);
                strcpy(personagens[identificadorBuscado-1].tituloDesenho, novoTitulo);
                cout << "\nTítulo do desenho do personagem alterado com sucesso!\n" << endl;
                
                break;
            
            case 4:
                fflush (stdin);
                cout<< "Digite o novo criador do personagem : ";
                cin.getline(novoCriador, 80);
                strcpy(personagens[identificadorBuscado-1].creator, novoCriador);
                cout << "\nCriador do personagem alterado com sucesso!\n" << endl;
                
                break;

            case 5:
                fflush (stdin);
                cout<< "Digite a nova descriacao personagem : ";
                cin.getline(novaDescricao, 500);
                strcpy(personagens[identificadorBuscado-1].bio, novaDescricao);
                cout << "\nDescrição do personagem alterada com sucesso!\n" << endl;
                
                break;
            
            default:
                break;
            }
            if (select != -1 and select != 0) {
                cout << "[0] - Para voltar ao menu de edicao" << endl;
                cout << "[-1] - Para encerrar a edicao" << endl;
                cin >> select;
                cin.ignore();
            }
            else {
                cin >> select;
                cin.ignore();
            }
        }while(select!= -1);

    cout << "\nOnde deseja salvar as alteracoes? " << endl 
        << "[1] - Arquivo.csv (sera criado um arquivo binario com o mesmo nome)\n"
        << "[2] - Arquivo Binario\n";

    int arquivo;
    cin >> arquivo;

    cout << "Qual o nome do arquivo?" << endl;
    cout <<  "\nATENCAO: Caso o nome do arquivo ja existir, o mesmo sera substituido!" << endl;
    string nomeArq;
    cin >> nomeArq;
    
    if (arquivo == 1) {
        ofstream arquivoAdd (nomeArq + ".csv");
    
        arquivoAdd << cabecalho << endl;
        for (int i = 0; i < tamanho; i++){
            arquivoAdd << personagens[i].identificador << ';' <<  personagens[i].name << ";" <<  personagens[i].tituloDesenho <<
            ';'<<  personagens[i].creator << ';' << personagens[i].height << ';' << personagens[i].bio << "\n";
        }

        ofstream arqBin (nomeArq + ".dat", ios::binary);

        arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
        arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
    }
    else {
        ofstream arqBin (nomeArq + ".dat", ios::binary);

        arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
        arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
    }            
    
    }
    cout << "\n" << endl;
}

//PROCEDIMENTO PARA DELETAR UM PERSONAGEM:

void delChar(character personagens[], int& tamanho, string cabecalho){

    int identificadorBuscado,  numeroDigitado;

    fflush(stdin);
    cout << "Digite o identificador do peronagem que deseja retirar: ";
    cin >> identificadorBuscado;

    cout << "PERSONAGEM " << personagens[identificadorBuscado-1].identificador << ": \n" << "Nome: " <<  personagens[identificadorBuscado-1].name << "\n" 
        << "Altura: "<< personagens[identificadorBuscado-1].height << " metros " << "\n" << "Titulo do Desenho: " 
        <<  personagens[identificadorBuscado-1].tituloDesenho << "\n" << "Criador: " << personagens[identificadorBuscado-1].creator 
        << "\n" << "Descricao: " << personagens[identificadorBuscado-1].bio << "\n" << endl;

    cout << "Voce deseja remover os dados desse identificador ? \n"<<
    "[1]- Sim " << endl << "[2]- Nao" << endl;

    cin >> numeroDigitado;

    if (numeroDigitado == 1){
        for (int i = identificadorBuscado; i < tamanho; i++){
            strcpy(personagens[i-1].name, personagens[i].name);
            strcpy(personagens[i-1].tituloDesenho, personagens[i].tituloDesenho);
            personagens[i-1].height = personagens[i].height;
            strcpy(personagens[i-1].creator, personagens[i].creator);
            strcpy(personagens[i-1].bio, personagens[i].bio);
        }
        tamanho--;
        

        cout << "\nOnde deseja salvar as alteracoes? " << endl 
        << "[1] - Arquivo.csv (sera criado um arquivo binario com o mesmo nome)\n"
        << "[2] - Arquivo Binario\n";

        int arquivo;
        cin >> arquivo;

        cout << "Qual o nome do arquivo?" << endl;
        cout <<  "\nATENCAO: Caso o nome do arquivo ja existir, o mesmo sera substituido!" << endl;
        string nomeArq;
        cin >> nomeArq;
        
        if (arquivo == 1) {
            ofstream arquivoAdd (nomeArq + ".csv");
        
            arquivoAdd << cabecalho << endl;
            for (int i = 0; i < tamanho; i++){
                arquivoAdd << personagens[i].identificador << ';' <<  personagens[i].name << ";" <<  personagens[i].tituloDesenho <<
                ';'<<  personagens[i].creator << ';' << personagens[i].height << ';' << personagens[i].bio << "\n";
            }

            ofstream arqBin (nomeArq + ".dat", ios::binary);

            arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
            arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
        }
        else {
            ofstream arqBin (nomeArq + ".dat", ios::binary);

            arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
            arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
        }

        cout << "Personagem removido com sucesso!\n";
    }
}

int main(){
    int capacidade = 50;
    character* personagens = new character[capacidade];

    string cabecalho;
    char lixo;
    int tamanho = 0;

    cout << "Informe a opcao de arquivo que deseja ler: " << endl;
    cout << "\n\n\nTipos de arquivo: \n\n"
                << "[1] -  Arquivo .CSV\n"
                << "[2] -  Arquivo Binario \n"; 
    
    int arquivo;
    cin >> arquivo;

    cout << "Informe o nome do arquivo: " << endl;
    string nomeArq;
    cin >> nomeArq;

    ifstream arqPersonagens;

    if (arquivo == 1) {
        arqPersonagens.open(nomeArq + ".csv");
    }
    else {
        arqPersonagens.open(nomeArq + ".dat", ios::binary);
    }

    if (not arqPersonagens){
        cout<< "Arquivo nao encontrado!"<< endl;
    }
    else {
    
        if (arquivo == 1) {
            ofstream arqBin (nomeArq + ".dat");
        
            getline(arqPersonagens, cabecalho);

            while (arqPersonagens >> personagens[tamanho].identificador) {
                if (tamanho >= capacidade - 1) {
                    character* temp = new character[capacidade+30];
                    for (int i = 0; i < capacidade; i++) {
                        temp[i] = personagens[i];
                    }
                    delete[] personagens;
                    personagens = temp;
                    capacidade+=30;
                }

                arqPersonagens >> lixo;
                arqPersonagens.getline(personagens[tamanho].name, 30, ';');
                arqPersonagens.getline(personagens[tamanho].tituloDesenho, 30, ';');
                arqPersonagens.getline(personagens[tamanho].creator, 80, ';');
                arqPersonagens >> personagens[tamanho].height;
                arqPersonagens >> lixo;
                arqPersonagens.getline(personagens[tamanho].bio, 500);
                tamanho++;
                fflush(stdin);
            }

            //escreve arquivo binário
            arqBin.write (reinterpret_cast <const char *>(&tamanho), sizeof(int));
            arqBin.write (reinterpret_cast <const char *>(personagens), tamanho * sizeof(character));
        }
        else {
            //Le arquivo binario
            arqPersonagens.read(reinterpret_cast <char *>(&tamanho), sizeof(int));
            arqPersonagens.read(reinterpret_cast <char *>(personagens), tamanho * sizeof(character));

            // Ajusta as strings lidas para terem o terminador nulo
            for (int i = 0; i < tamanho; i++) {
                personagens[i].name[sizeof(personagens[i].name) - 1] = '\0';
                personagens[i].tituloDesenho[sizeof(personagens[i].tituloDesenho) - 1] = '\0';
                personagens[i].creator[sizeof(personagens[i].creator) - 1] = '\0';
                personagens[i].bio[sizeof(personagens[i].bio) - 1] = '\0';
            }
        }

        int select = 0;
        
        do {
            switch(select){
                case 0:
                    cout << "\n\n\nMetodos de Pesquisa: \n\n" 
                        << "[1] - Mostrar lista completa \n"
                        << "[2] - Pesquisar por nome \n" 
                        << "[3] - Pesquisar por altura \n" 
                        << "[4] - Adicionar personagem \n"
                        << "[5] - Editar personagem \n"
                        << "[6] - Retirar personagem \n\n" 
                        << "[-1] - Para encerrar o programa\n" << endl;
                    break;
                case 1:
                    imprimirLista(personagens, tamanho);
                    break;

                case 2:
                    searchName(personagens, tamanho);
                    break;

                case 3:
                    searchHeight(personagens, tamanho);
                    break;

                case 4:
                    addChar(personagens, tamanho, cabecalho);
                    break;

                case 5:
                    editChar(personagens, tamanho, cabecalho);
                    break;

                case 6:
                    delChar(personagens, tamanho, cabecalho);
                    break;

                default:
                    cout << "Programa encerrado";
                    break;
            }

            if (select != -1 and select != 0) {
                cout << "[0] - Para voltar ao menu principal" << endl;
                cout << "[-1] - Para encerrar o programa" << endl;
                cin >> select;
                cin.ignore();
            }
            else {
                cin >> select;
                cin.ignore();
            }

        } while (select != -1);

        cout << "\n\nPrograma Encerrado!" << endl;
    }

    return 0;
}
